{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","action.js","constant.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","onChange","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","console","log","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","instialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3b647c0.chunk.js","sourcesContent":["import React from 'react';\r\n/* tachiyon animation is used which is a part of css\r\ngrow is the animation for the card component\r\n${props.id} generates something random that gets put into the id property from the robot.js file\r\nThe name and email is added in dynamically \r\n*/\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' > \r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => { //for loop generates the card from info from robots.js\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey ={i}\r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n\r\n//key prop should be something that doesn't change","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => { // every single component has the property prop\r\n\treturn  (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState( {hasError: true})\r\n\t}\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1> Ohhh. That is not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../action';\r\n//searchfield is going to be used as props for the app component is going to come from state.searchRobots.searchfield in reducer.js\r\nconst mapStateToProps = (state) => {\r\n\treturn {\t//State has only one field\r\n\t\tsearchField: state.searchRobots.searchField,//told what state to listen to and send as props\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {//event is the input\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\t\r\n}\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots(); \r\n\t}//goes to website \r\n\r\n\trender() {\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconsole.log(searchField);\r\n\t\t// A new array is basically created\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase()); //if the robot includes anything in the seach box\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1 className ='tc'>Loading</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className = 'f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t}\t//end of render\r\n}\t//end of class App\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\t//connect is a higher order function.\r\n\r\n// These comments are to help me understand what I'm doing and how things work with redux and react.\r\n//connect will run with the two parameters and then give those props to App.\r\n//connect will run and return another function\r\n//connect takes in two parameters\r\n// Right now we have connect to the App component and subscribed to any state changes in the redux store.\r\n//Now App knows that a redux store exist and now we have to tell App what to listen too.","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\r\n} from './constant.js'\t//good practise to find error\r\n\r\n// An action is an object that we created\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD,\t//usually CAP is const , standard\r\n\t\tpayload: text\t\r\n\t}\r\n}\t//it will take text and return an object and send a text to user as payload\r\n// () used, it significants returning something.\r\n\r\n// We return a function, and the dispatch is used to call the actions.\r\n// when we get the users we either have a SUCCESS or a FAILED.\r\nexport const requestRobots = () => (dispatch) => {\t//a higher functions\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users') //fetch comes with all browsers and makes request to servers\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n//dispatch is something that we use in dispatch the props. In App.js\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\r\n} from './constant.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n//Now we create a reducer that outputs a state\r\n//actions are just objects that we are returning \r\n// we give the two parameters default values using ES6 \r\n// REDUCER\r\nexport const searchRobots = (state=initialStateSearch, action={})\t=> {\r\n\t//we act upon the state based on action\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\t//we return a new state, we pass the third parameter as an object so we have it in a {}\r\n\t\tdefault:\r\n\t\t\treturn state;\t//we could have used an if statement\r\n\t}\t//end of switch statement.\t\r\n}\r\n\r\nconst instialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\n\r\nexport const requestRobots = (state=instialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots, requestRobots} from './reducers';\r\nimport 'tachyons'; //Helps with CSS\r\n//import {robots} from './robots';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\r\n// the store can be accessed and passed to App\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\t//we want to combine all the reducer into rootreducer\r\n\r\nReactDOM.render(\r\n\t\t\t\t<Provider store={store}> \r\n\t\t\t\t\t<App/>\r\n\t\t\t\t</Provider>, document.getElementById('root'));\t//Provider passes store to the components of the app tree\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// Info about Connect from react-redux\r\n//connect function from redux is optomised to avoid using store.subscribe.\r\n//\r\n// Information on Provider\r\n//It passes the store to the components"],"sourceRoot":""}